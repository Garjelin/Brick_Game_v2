=== tetris.cpp ===
#include "../brick_game/tetris/tetris_game.h"
#include "../gui/console/tetris_console_controller.h"
GameField* getGamefield() {
    static GameField game(10, 20); 
    return &game;
}

void startGameLoop(GameField* game, TConsoleController* tConsoleController, TScreen* screen);

int main(void)
{
    initscr(); // инициализация экрана
    cbreak(); // Включение режима cbreak (буферизация не используется)
    noecho(); // Отключение отображения вводимых символов
    curs_set(0); // Скрыть курсор

    GameField* game = getGamefield();
    TConsoleController tConsoleController;
    TScreen* screen = new TScreen('\0');
    startGameLoop(game, &tConsoleController, screen);
    //

    endwin(); // закрытие экрана
    return 0;
}
=== ../brick_game/tetris/tetris_game.h ===
#ifndef T_GAME_H
#define T_GAME_H

#include <iostream>
#include <ncurses.h>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <unistd.h> 
#include <chrono>
#include <thread>

using namespace std;

const int scr_width = 10;
const int scr_height = 20;

const char c_fig = 'o';
const char c_field = '.';
const char c_figDown = 'o';

typedef char TScreenMap[scr_height][scr_width];
typedef char TFieldMap[scr_height][scr_width];

const int shp_width = 4;
const int shp_height = 4;
typedef char TShape[shp_height][shp_height];


class GameField;

typedef enum {
    Start,
    Pause,
    Terminate,
    Left,
    Right,
    Up,
    Down,
    Action,
    None
} UserAction_t;

class ScreenMap {
public:
    char map[scr_height][scr_width];
    ScreenMap(char ch) { memset(map, ch, sizeof(map)); }
    char& operator()(int i, int j) { return map[i][j]; }
};

class FieldMap {
public:
    char map[scr_height][scr_width];
    FieldMap(char ch) { memset(map, ch, sizeof(map)); }
    char& operator()(int i, int j) { return map[i][j]; }
};

class TScreen {
    ScreenMap scr;
public:
    TScreen(char ch) : scr(ch) {}
    ~TScreen() {}
    ScreenMap& getScreen() { return scr; }
    void Show() {
        for (int i = 0; i < scr_height; ++i) {
            for (int j = 0; j < scr_width; ++j) {
                mvaddch(i, j, scr(i, j));
            }
        }
    }

};

class TField {
    
public:
    FieldMap fld;
    TField(char ch) : fld(ch) {}
    void FillScr() {
        for (int i = 0; i < scr_height; ++i) {
            for (int j = 0; j < scr_width; ++j) {
                fld(i, j) = c_field;
            }
        }
    }
    void Put(ScreenMap &scr);
    void Burning();
};

class TFigure {
    int x, y;
    TShape vid;
    char turn;
    int coordCnt;
    struct Coord {
        int x;
        int y;
    } coord[shp_width * shp_height];
    //TField *field;
public:
    TFigure() {
        memset(this, 0, sizeof(*this));
        //field = _field;
    }
    void Shape(const char _vid[]) {memcpy(vid, _vid, sizeof(vid));}
    void Pos(int _x, int _y) { 
        x = _x; y = _y; 
        CalcCoord();
        }
    char TurnGet() {return turn;}
    void TurnSet(char _turn);
    void Put(ScreenMap &scr);
    void PutField(FieldMap &fld);
    bool MoveFig(int dx, int dy);
    int Check();
private:
    void CalcCoord();
};

class GameField {
    // TScreen *screen;
    TField *field;
    TFigure *figure;

    bool m_isGameOver;
    int m_width;
    int m_height;
public:
    GameField(int width, int height);
    ~GameField() {
        for (int i = 0; i < shpArrCnt; ++i) {
            delete[] shpArr[i];
        }
        delete[] shpArr;
        // delete screen;
        delete field;
        delete figure;
    }
    char **shpArr;
    int shpArrCnt;
    int shpFrame;
    TFigure* getFigure() { return figure; };
    TField* getField() { return field; };
    void PlayerControl();
    int getWidth() { return m_width; }
    int getHeight() { return m_width; }
    bool isGameOver() { return m_isGameOver; }
    void setGameOver() { m_isGameOver = true; }
};

#endif // T_GAME_H


=== ../gui/console/tetris_console_controller.h ===
#ifndef T_CONSOLE_CONTROLLER_H
#define T_CONSOLE_CONTROLLER_H

#include "../../brick_game/tetris/tetris_game.h"

class TConsoleController {
public:
    TConsoleController() {}
    ~TConsoleController() {}
    void userInput(UserAction_t action, bool hold);
    UserAction_t convertGetchToUserAction(int ch);
};

#endif // T_CONSOLE_CONTROLLER_H
=== ../gui/console/tetris_console_controller.cpp ===
#include "tetris_console_controller.h"

GameField* getGamefield();

UserAction_t TConsoleController::convertGetchToUserAction(int ch) {
    switch (ch) {
        case 'e':
            return Start;
        case ' ':
            return Pause;
        case 'q':
            return Terminate;
        case 'a':
            return Left;
        case 'd':
            return Right;
        case 'r':
            return Up;
        case 's':
            return Down;
        case 'w':
            return Action;
        default:
            return None;
    }
}

void TConsoleController::userInput(UserAction_t action, bool hold) {
    GameField* game = getGamefield();
    switch (action) {
        case Pause:
            break;
        case Terminate: 
            game->setGameOver();
            break;
        case Up: 
            break;
        case Down: 
            game->getFigure()->MoveFig(0, 1);
            break;
        case Left: 
            game->getFigure()->MoveFig(-1, 0);
            break;
        case Right: 
            game->getFigure()->MoveFig(1, 0);
            break;
        case Start:
            break;
        case Action:
            game->getFigure()->TurnSet(game->getFigure()->TurnGet() + 1);
            break;
        case None:
            break;
        }
        (void)hold;
}

void startGameLoop(GameField* game, TConsoleController* tConsoleController, TScreen* screen) {
    timeout(1);
    while (!game->isGameOver()) {
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
        UserAction_t action = tConsoleController->convertGetchToUserAction(getch());
        tConsoleController->userInput(action, false);
        
        //game->MoveGame();

        static int tick = 0;
        tick++;
        if (tick >=50) {
            if (!game->getFigure()->MoveFig(0,1)){
                game->getFigure()->PutField(game->getField()->fld);
                game->getFigure()->Shape(game->shpArr[rand() % game->shpArrCnt]);
                game->getFigure()->Pos(game->getWidth()/2 - shp_width/2, 0);
                if (game->getFigure()->Check() > 0) {
                    game->setGameOver();
                    //field.FillScr();
                }
            }
            game->getField()->Burning();
            tick = 0;
        }

        //game->Show();

        erase();
        game->getField()->Put(screen->getScreen());
        game->getFigure()->Put(screen->getScreen());
        screen->Show();
        refresh(); 
    }
}
